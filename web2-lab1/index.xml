<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Wprowadzenie on Metody Wytwarzania Oprogramowania - wprowadzenie do REST</title>
    <link>https://jdajda.github.io/mwo/web2-lab1/</link>
    <description>Recent content in Wprowadzenie on Metody Wytwarzania Oprogramowania - wprowadzenie do REST</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>pl-PL</language><atom:link href="https://jdajda.github.io/mwo/web2-lab1/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Pierwsze kroki</title>
      <link>https://jdajda.github.io/mwo/web2-lab1/01_firststeps/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://jdajda.github.io/mwo/web2-lab1/01_firststeps/</guid>
      <description>Sforkuj projekt: https://github.com/jdajda/agh-mwo-enroller Następnie sklonuj swoje repozytorium i zaimportuj do IntelliJ IDEA Uruchom projekt (główna klasa: com.company.enroller.App). Powinieneś zobaczyć w ostatnich linijkach konsoli mniej więcej taką linijkę: INFO 11920 --- [ main] o.s.b.w.embedded.tomcat.TomcatWebServer : Tomcat started on port(s): 8080 (http) with context path &amp;#39;&amp;#39;  Zobacz czy serwis działa: http://localhost:8080/participants. Powinieneś zobaczyć: [{&amp;#34;login&amp;#34;:&amp;#34;user2&amp;#34;,&amp;#34;password&amp;#34;:&amp;#34;password&amp;#34;},{&amp;#34;login&amp;#34;:&amp;#34;user3&amp;#34;,&amp;#34;password&amp;#34;:&amp;#34;password&amp;#34;},{&amp;#34;login&amp;#34;:&amp;#34;user4&amp;#34;,&amp;#34;password&amp;#34;:&amp;#34;password&amp;#34;},{&amp;#34;login&amp;#34;:&amp;#34;user5&amp;#34;,&amp;#34;password&amp;#34;:&amp;#34;password&amp;#34;}]  Zobaczmy to samo z poziomu konsoli. Uruchom terminal (Git Bash) i wpisz curl -s http://localhost:8080/participants Sprawdź jaki kod odpowiedzi serwer zwraca adresu dla http://localhost:8080 Pobierz i zainstaluj aplikację Postman https://www.</description>
    </item>
    <item>
      <title>Obsługa endpointa dla uczestników</title>
      <link>https://jdajda.github.io/mwo/web2-lab1/02_participant/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://jdajda.github.io/mwo/web2-lab1/02_participant/</guid>
      <description>Do tej pory możemy tylko listować uczestników. Dodaj endpoint który pozwoli na pobranie jednego wskazanego uczestnika. W tym celu zaimplementuj metodę ParticipantService.findByLogin(String login) oraz odpowiedniego endpointa w klasie ParticipantRestController. Poniżej kod takiego endpointa:
@RequestMapping(value = &amp;#34;/{id}&amp;#34;, method = RequestMethod.GET) public ResponseEntity&amp;lt;?&amp;gt; getParticipant(@PathVariable(&amp;#34;id&amp;#34;) String login) {  Participant participant = participantService.findByLogin(login);  if (participant == null) {  return new ResponseEntity(HttpStatus.NOT_FOUND);  }  return new ResponseEntity&amp;lt;Participant&amp;gt;(participant, HttpStatus.OK); }   Jeśli chcesz żeby za każdym razem nie trzeba było restartować serwera, dodaj nową zależność do swojego pom.</description>
    </item>
    <item>
      <title>Wdrożenie</title>
      <link>https://jdajda.github.io/mwo/web2-lab1/03_deployment/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://jdajda.github.io/mwo/web2-lab1/03_deployment/</guid>
      <description>By wdrożyć nasze rozwiązanie wykorzystamy serwis Heroku w ramach jego darmowego planu. W tym celu będziemy musieli utworzyć konto w serwisie i następnie zintegrować je ze swoim repozytorium.
 Stwórz konto na Heroku www.heroku.com Stwórz nową aplikację.  Podczas konfiguracji podaj nazwę oraz lokalizację swojej maszyny  Podłącz Heroku do swojego Githuba i odszukaj odpowiednie repozytorium  Po podpięciu repozytorium będzie ono widoczne w Twojej konfiguracji.  Następnie aktywuj automatyczną aktualizację aplikacji i zdeploy&amp;rsquo;uj swoją aplikację.</description>
    </item>
    <item>
      <title>Realizacja pozostałych endpointów</title>
      <link>https://jdajda.github.io/mwo/web2-lab1/04_other_endpoints/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://jdajda.github.io/mwo/web2-lab1/04_other_endpoints/</guid>
      <description>Zrealizuj endpoint dla spotkań. Ma umożliwiać:
 Wersja BASIC  Pobieranie listy wszystkich spotkań Pobieranie listy pojedyncznego spotkania Dodawanie spotkań Dodawanie uczestnika do spotkania Pobieranie uczestników spotkania   Wersja GOLD (dodatkowo do BASIC)  Usuwanie spotkań Aktualizację spotkań Usuwanie uczestnika ze spotkania   Wersja PREMIUM (dodatkowo do GOLD)  Sortowanie listy spotkań po tytule spotkania Przeszukiwanie listy spotkań po tytule i opisie (na zasadzie substring) Przeszukiwanie listy spotkań po zapisanym uczestniku spotkania    </description>
    </item>
    <item>
      <title>Testy endpointów</title>
      <link>https://jdajda.github.io/mwo/web2-lab1/05_testing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://jdajda.github.io/mwo/web2-lab1/05_testing/</guid>
      <description> Przeanalizuj kod testów w klasie ParticipantRestControllerTest Uzupełnij testy korzystając z poniższej podpowiedzi: @Test public void addParticipant() throws Exception {  Participant participant = new Participant();  participant.setLogin(&amp;#34;testlogin&amp;#34;);  participant.setPassword(&amp;#34;testpassword&amp;#34;);  String inputJSON = &amp;#34;{\&amp;#34;login\&amp;#34;:\&amp;#34;testlogin\&amp;#34;, \&amp;#34;password\&amp;#34;:\&amp;#34;somepassword\&amp;#34;}&amp;#34;;   given(participantService.findByLogin(&amp;#34;testlogin&amp;#34;)).willReturn((Participant)null);  given(participantService.create(participant)).willReturn(participant);  mvc.perform(post(&amp;#34;/participants&amp;#34;).content(inputJSON).contentType(MediaType.APPLICATION_JSON)).andExpect(status().isCreated());   given(participantService.findByLogin(&amp;#34;testlogin&amp;#34;)).willReturn(participant);  mvc.perform(post(&amp;#34;/participants&amp;#34;).content(inputJSON).contentType(MediaType.APPLICATION_JSON)).andExpect(status().isConflict());   verify(participantService, times(2)).findByLogin(&amp;#34;testlogin&amp;#34;); }  Posługując się analogią, napisz testy dla aktualizacji i usuwania użytkowników.  </description>
    </item>
  </channel>
</rss>
<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Wprowadzenie on Metody Wytwarzania Oprogramowania - wprowadzenie do REST</title>
    <link>https://jdajda.github.io/mwo/web2-lab1/</link>
    <description>Recent content in Wprowadzenie on Metody Wytwarzania Oprogramowania - wprowadzenie do REST</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>pl-PL</language><atom:link href="https://jdajda.github.io/mwo/web2-lab1/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Wprowadzenie</title>
      <link>https://jdajda.github.io/mwo/web2-lab1/00_intro/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://jdajda.github.io/mwo/web2-lab1/00_intro/</guid>
      <description>Celem systemu jest wsparcie w zakresie zapisów na przeróżne spotkania tematyczne. Zakładamy, że tworzonym systemie mamy dwie grupy informacji:
o użytkownikach systemu o spotkaniach Podstawowym zbiorem informacji są nasi użytkownicy. Bez nich organizacja spotkań nie ma sensu. Muszą posiadać konto w systemie, by mogli się zapisać lub wypisać ze spotkania.
Od strony technicznej potrzebujemy więc zbudować 2 serwisy:
do zarządzania użytkownikami/uczestnikami do zarządzania spotkaniami Za chwilę pobierzesz projekt. Zawiera podstawowy szkielet, który należy rozszerzyć o brakujące serwisy.</description>
    </item>
    <item>
      <title>Pierwsze kroki</title>
      <link>https://jdajda.github.io/mwo/web2-lab1/01_firststeps/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://jdajda.github.io/mwo/web2-lab1/01_firststeps/</guid>
      <description>Sforkuj projekt: https://github.com/jdajda/agh-mwo-enroller Następnie sklonuj swoje repozytorium i zaimportuj do IntelliJ IDEA Uruchom projekt (główna klasa: com.company.enroller.App). Powinieneś zobaczyć w ostatnich linijkach konsoli mniej więcej taką linijkę: INFO 11920 --- [ main] o.s.b.w.embedded.tomcat.TomcatWebServer : Tomcat started on port(s): 8080 (http) with context path &amp;#39;&amp;#39; Zobacz czy serwis działa: http://localhost:8080/participants. Powinieneś zobaczyć: [{&amp;#34;login&amp;#34;:&amp;#34;user2&amp;#34;,&amp;#34;password&amp;#34;:&amp;#34;password&amp;#34;},{&amp;#34;login&amp;#34;:&amp;#34;user3&amp;#34;,&amp;#34;password&amp;#34;:&amp;#34;password&amp;#34;},{&amp;#34;login&amp;#34;:&amp;#34;user4&amp;#34;,&amp;#34;password&amp;#34;:&amp;#34;password&amp;#34;},{&amp;#34;login&amp;#34;:&amp;#34;user5&amp;#34;,&amp;#34;password&amp;#34;:&amp;#34;password&amp;#34;}] Zobaczmy to samo z poziomu konsoli. Uruchom terminal (Git Bash) i wpisz curl -s http://localhost:8080/participants Sprawdź jaki kod odpowiedzi serwer zwraca adresu dla http://localhost:8080 Pobierz i zainstaluj aplikację Postman https://www.</description>
    </item>
    <item>
      <title>Pobieranie i dodawanie uczestników</title>
      <link>https://jdajda.github.io/mwo/web2-lab1/02_participant/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://jdajda.github.io/mwo/web2-lab1/02_participant/</guid>
      <description>Do tej pory możemy tylko listować uczestników. Dodaj endpoint który pozwoli na pobranie jednego wskazanego uczestnika. W tym celu zaimplementuj metodę ParticipantService.findByLogin(String login) oraz odpowiedniego endpointa w klasie ParticipantRestController. Poniżej kod takiego endpointa:
@RequestMapping(value = &amp;#34;/{id}&amp;#34;, method = RequestMethod.GET) public ResponseEntity&amp;lt;?&amp;gt; getParticipant(@PathVariable(&amp;#34;id&amp;#34;) String login) { Participant participant = participantService.findByLogin(login); if (participant == null) { return new ResponseEntity(HttpStatus.NOT_FOUND); } return new ResponseEntity&amp;lt;Participant&amp;gt;(participant, HttpStatus.OK); } Zaimplementuj dodawanie uczestników. Metoda powinna zostać zadeklarowana w sposób następujący:</description>
    </item>
    <item>
      <title>Dodatkowe funkcje dla uczestników</title>
      <link>https://jdajda.github.io/mwo/web2-lab1/03_participant_advanced/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://jdajda.github.io/mwo/web2-lab1/03_participant_advanced/</guid>
      <description>Analogicznie zaimplementuj samodzielnie usuwanie uczestników oraz ich aktualizację.
Rozszerz swoją implementację o moliwość sortowania uczestników po loginie. Dodatkowo chcemy mieć możliwość wyboru kolejności sortowania ASC lub DESC wg przykładów poniżej:
Sortowanie listy wyników po loginie w kolejności malejącej http://localhost:8080/participants?sortBy=login&amp;amp;sortOrder=DESC Sortowanie listy wyników po loginie w kolejności rosnącej http://localhost:8080/participants?sortBy=login&amp;amp;sortOrder=ASC Sortowanie listy wyników w domyślnej kolejności (parametr sortOrder nie jest obowiązkowy): http://localhost:8080/participants?sortBy=login Endpoint powinnien być odporny na podawanie błędnych/nie obsługiwanych wartości.</description>
    </item>
    <item>
      <title>Endpointy dla spotkań</title>
      <link>https://jdajda.github.io/mwo/web2-lab1/04_meeting/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://jdajda.github.io/mwo/web2-lab1/04_meeting/</guid>
      <description>Analogicznie do endpoint&amp;rsquo;ów dla uczestników zaimplementuj endpointy dla spotkań a więc:
Pobieranie listy wszystkich spotkań Pobieranie listy pojedyncznego spotkania Dodawanie spotkań Usuwanie spotkań Aktualizację spotkań </description>
    </item>
  </channel>
</rss>